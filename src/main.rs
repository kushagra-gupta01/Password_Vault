mod pentry;

use crate::pentry::ServiceInfo;
use crate::pentry::prompt;
use crate::pentry::read_passwords_from_file;

fn clr(){
    print!("{}[2J",27 as char);
}

fn main(){
    clr();
    let ascii = r#"
    
          _____                    _____                    _____                    _____                            _____                    _____                    _____                    _____        _____          
         /\    \                  /\    \                  /\    \                  /\    \                          /\    \                  /\    \                  /\    \                  /\    \      /\    \         
        /::\    \                /::\    \                /::\    \                /::\    \                        /::\____\                /::\    \                /::\____\                /::\____\    /::\    \        
       /::::\    \              /::::\    \              /::::\    \              /::::\    \                      /:::/    /               /::::\    \              /:::/    /               /:::/    /    \:::\    \       
      /::::::\    \            /::::::\    \            /::::::\    \            /::::::\    \                    /:::/    /               /::::::\    \            /:::/    /               /:::/    /      \:::\    \      
     /:::/\:::\    \          /:::/\:::\    \          /:::/\:::\    \          /:::/\:::\    \                  /:::/    /               /:::/\:::\    \          /:::/    /               /:::/    /        \:::\    \     
    /:::/__\:::\    \        /:::/__\:::\    \        /:::/__\:::\    \        /:::/__\:::\    \                /:::/____/               /:::/__\:::\    \        /:::/    /               /:::/    /          \:::\    \    
   /::::\   \:::\    \      /::::\   \:::\    \       \:::\   \:::\    \       \:::\   \:::\    \               |::|    |               /::::\   \:::\    \      /:::/    /               /:::/    /           /::::\    \   
  /::::::\   \:::\    \    /::::::\   \:::\    \    ___\:::\   \:::\    \    ___\:::\   \:::\    \              |::|    |     _____    /::::::\   \:::\    \    /:::/    /      _____    /:::/    /           /::::::\    \  
 /:::/\:::\   \:::\____\  /:::/\:::\   \:::\    \  /\   \:::\   \:::\    \  /\   \:::\   \:::\    \             |::|    |    /\    \  /:::/\:::\   \:::\    \  /:::/____/      /\    \  /:::/    /           /:::/\:::\    \ 
/:::/  \:::\   \:::|    |/:::/  \:::\   \:::\____\/::\   \:::\   \:::\____\/::\   \:::\   \:::\____\            |::|    |   /::\____\/:::/  \:::\   \:::\____\|:::|    /      /::\____\/:::/____/           /:::/  \:::\____\
\::/    \:::\  /:::|____|\::/    \:::\  /:::/    /\:::\   \:::\   \::/    /\:::\   \:::\   \::/    /            |::|    |  /:::/    /\::/    \:::\  /:::/    /|:::|____\     /:::/    /\:::\    \          /:::/    \::/    /
 \/_____/\:::\/:::/    /  \/____/ \:::\/:::/    /  \:::\   \:::\   \/____/  \:::\   \:::\   \/____/             |::|    | /:::/    /  \/____/ \:::\/:::/    /  \:::\    \   /:::/    /  \:::\    \        /:::/    / \/____/ 
          \::::::/    /            \::::::/    /    \:::\   \:::\    \       \:::\   \:::\    \                 |::|____|/:::/    /            \::::::/    /    \:::\    \ /:::/    /    \:::\    \      /:::/    /          
           \::::/    /              \::::/    /      \:::\   \:::\____\       \:::\   \:::\____\                |:::::::::::/    /              \::::/    /      \:::\    /:::/    /      \:::\    \    /:::/    /           
            \::/____/               /:::/    /        \:::\  /:::/    /        \:::\  /:::/    /                \::::::::::/____/               /:::/    /        \:::\__/:::/    /        \:::\    \   \::/    /            
             ~~                    /:::/    /          \:::\/:::/    /          \:::\/:::/    /                  ~~~~~~~~~~                    /:::/    /          \::::::::/    /          \:::\    \   \/____/             
                                  /:::/    /            \::::::/    /            \::::::/    /                                                /:::/    /            \::::::/    /            \:::\    \                      
                                 /:::/    /              \::::/    /              \::::/    /                                                /:::/    /              \::::/    /              \:::\____\                     
                                 \::/    /                \::/    /                \::/    /                                                 \::/    /                \::/____/                \::/    /                     
                                  \/____/                  \/____/                  \/____/                                                   \/____/                  ~~                       \/____/                      
                                                                                                                                                                                                                             

    "#;
    println!("{ascii}");
    loop {
        println!("Password Manager Menu");
        println!("1. Add Entry");
        println!("2. List Entries");
        println!("3. Search Entries");
        println!("4. Quit");

        let mut choice =String::new();
        std::io::stdin().read_line(&mut choice).unwrap();

        match choice.trim() {
            "1" => {
                clr();
                let entry = ServiceInfo::new(
                    prompt("Service :"),
                    prompt("Username :"),
                    prompt("Password :")
                );
                println!("Entry added successfully.");
                entry.write_to_file();
            }
            
            "2" => {
                clr();
                let services =  read_passwords_from_file().unwrap_or_else(|err|{
                    eprintln!("Error reading passwords:{}",err);
                    Vec::new()
                }); 
                for items in services{
                    println!(
                        "Service = {}
                        - Username : {}
                        - Password : {}",
                        items.service, items.username, items.password
                    );
                }
            }

            "3" => {
                clr();
                let services = read_passwords_from_file().unwrap_or_else(|err| {
                    eprintln!("Error reading passwords:{}",err);
                    Vec::new()
                });
                let search = prompt("Search :");
                for item in &services{
                    if item.service.as_str() == search.as_str(){
                        println!(
                            "Service = {}
                            - Username : {}
                            - Password : {}",
                            item.service, item.username,item.password
                        );
                    }
                }
            }

            "4" => {
                clr();
                print!("GoodBye!");
                break;
            }
            _=>{ print!("Invalid Choice")},
        }
        print!("\n\n");
    }
}
